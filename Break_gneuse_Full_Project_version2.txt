 

### سند رسمی پیاده‌سازی اکسپرت معاملاتی Elemento

#### بخش اول: توضیح روان و خودمانی
اکسپرت **Elemento** یه ربات معاملاتی خودکار برای متاتریدر ۵ هست که بر اساس استراتژی شکست رنج‌های زمانی (Time-Range Breakout) طراحی شده. این اکسپرت می‌تونه تا ۴ بازه زمانی (رنج) مستقل رو به‌صورت همزمان مدیریت کنه، انگار که ۴ معامله‌گر جداگونه دارن روی چارت کار می‌کنن! هر رنج یه بازه زمانی مشخص داره (مثل ۲۳:۰۰ تا ۴:۰۰ صبح) که توش فقط قیمت‌ها رو نگاه می‌کنه و هیچ کاری نمی‌کنه تا بازه تموم بشه. بعد از تموم شدن بازه، اکسپرت سقف و کف قیمت تو اون بازه رو پیدا می‌کنه و چک می‌کنه که آیا این رنج "کیفیت" خوبی داره یا نه (یعنی فاصله بین سقف و کفش بین حداقل و حداکثر مجاز باشه، مثلاً ۵۰ تا ۵۰۰ پوینت).

اگه رنج کیفیتش خوب باشه، اکسپرت دوتا سفارش شرطی می‌ذاره:
- یه **Buy Stop** یه کم بالاتر از سقف رنج.
- یه **Sell Stop** یه کم پایین‌تر از کف رنج.

فاصله این سفارش‌ها از سقف و کف می‌تونه بر اساس اندیکاتور ATR یا یه درصد از ارتفاع رنج تنظیم بشه. به محض اینکه یکی از این سفارش‌ها فعال بشه (مثلاً قیمت به Buy Stop برسه و معامله خرید باز بشه)، سفارش مخالف (Sell Stop) فوراً لغو می‌شه تا فقط یه معامله باز بمونه.

مدیریت معامله هم خیلی حرفه‌ایه:
- **حجم معامله**: اکسپرت حجم رو طوری محاسبه می‌کنه که ضرر احتمالی همیشه یه درصد ثابت از حساب (مثل ۱٪) باشه.
- **خروج پله‌ای**: اگه معامله سود بده و به یه نسبت مشخص (مثل ۱.۵ برابر فاصله استاپ لاس) برسه، نصف معامله (یا هر درصدی که کاربر گفته) بسته می‌شه و استاپ لاس بقیه معامله به نقطه ورود می‌ره (ریسک‌فری).
- **تریلینگ استاپ**: بعد از ریسک‌فری، اکسپرت استاپ لاس رو پشت قیمت حرکت می‌ده تا سود بیشتری جمع کنه.
- **پاکسازی**: هر رنج یه زمان انقضا داره (مثل ۵ ساعت بعد از پایان رنج). وقتی به این زمان برسه، همه پوزیشن‌ها و سفارش‌های باز مربوط به اون رنج بسته می‌شن. اگه هم به تعطیلات آخر هفته یا تعطیلی بازار نزدیک بشیم، همه چیز قبلش پاکسازی می‌شه.

هر رنج یه مستطیل رنگی روی چارت رسم می‌کنه تا کاربر بتونه راحت ببینتش، و این مستطیل تو زمان پاکسازی حذف می‌شه. تمام تنظیمات (مثل ساعت شروع و پایان، تایم‌فریم، رنگ، و غیره) برای هر رنج جداگونه قابل تنظیمه. کد هم طوری نوشته می‌شه که بهینه باشه، با متاتریدر ۵ کاملاً هماهنگ باشه، و بتونه تو آینده روی چند جفت ارز کار کنه بدون نیاز به تغییرات زیاد.

---

#### بخش دوم: معماری فنی و الگوریتمی

##### ۱. ساختار فایل‌ها
برای تمیز و ماژولار بودن کد، پروژه به چند فایل تقسیم می‌شه:
- **Elemento.mq5**: فایل اصلی که نقش "رهبر ارکستر" رو داره. مدیریت کلی، مقداردهی اولیه، و فراخوانی توابع رنج‌ها رو انجام می‌ده.
- **Settings.mqh**: کتابخانه تنظیمات با گروه‌بندی منظم برای کاربرپسندی:
  - **General Settings**:
    - `BaseMagicNumber` (برای تخصیص مجیک نامبرها: Base, Base+1, Base+2, Base+3)
    - `RiskPercent` (مثل ۱٪ برای محاسبه حجم معامله)
  - **Range X Settings** (برای هر رنج، X=1,2,3,4):
    - `Range_Start_Hour` (enum: 0-23), `Range_Start_Minute` (enum: 0-59)
    - `Range_End_Hour` (enum: 0-23), `Range_End_Minute` (enum: 0-59)
    - `Range_Execution_Timeframe` (enum: M1, M5, M15, H1, etc.)
    - `MinRangePoints`, `MaxRangePoints` (برای فیلتر کیفیت رنج)
    - `Placement_Mode` (enum: ATR, Percent), `ATR_Period`, `ATR_Multiplier` (برای سفارش‌های پندینگ)
    - `SL_Mode` (enum: ATR, Percent), `SL_ATR_Period`, `SL_ATR_Multiplier` (برای استاپ لاس)
    - `Trailing_Mode` (enum: ATR, Simple), `Trailing_ATR_Period`, `Trailing_ATR_Multiplier` (برای تریلینگ استاپ)
    - `RR_Ratio` (مثل ۱.۵ برای خروج پله‌ای), `PartialClosePercent` (مثل ۵۰٪)
    - `Cleanup_Hours` (enum: 0-24, برای زمان انقضا)
    - `Range_Color` (برای رنگ مستطیل گرافیکی)
- **CRange.mqh**: کلاس اصلی برای مدیریت هر رنج به‌صورت مستقل.
- **Libraries/**:
  - **TradeManager.mqh**: شامل توابع مدیریت معاملات:
    - `TrailingStop()`: مدیریت تریلینگ استاپ با تیکت پوزیشن.
    - `PartialClose()`: بستن بخشی از پوزیشن با نرمالایز حجم.
  - **RiskManager.mqh**:
    - `CalculateLotSize()`: محاسبه حجم معامله.
  - **TimeHelper.mqh**: توابع کمکی برای مدیریت زمان (مثل تبدیل ساعت به datetime، بررسی تعطیلات).

##### ۲. کلاس CRange
این کلاس قلب تپنده اکسپرته و هر رنج رو به‌صورت یه واحد مستقل مدیریت می‌کنه.

###### Properties (متغیرها):
- **ورودی‌ها**: تمام تنظیمات از Settings.mqh (مثل ساعت‌ها، تایم‌فریم، رنگ، مجیک نامبر، تنظیمات ATR).
- **داخلی**:
  - `m_rangeHigh`, `m_rangeLow`: سقف و کف رنج.
  - `m_cleanupTime`: زمان انقضا (EndTime + CleanupHours * 3600).
  - `m_currentState`: enum با حالت‌های WAITING, IDENTIFIED, ORDERS_PLACED, TRADE_ACTIVE, EXPIRED.
  - `m_magicNumber`: مجیک نامبر اختصاصی رنج.
  - `m_rangeObjectName`: نام مستطیل گرافیکی.

###### Methods (توابع):
1. **UpdateOnNewBar()**:
   - روی هر کندل جدید (در تایم‌فریم رنج) فراخوانی می‌شه.
   - بر اساس `m_currentState` یکی از توابع زیر رو اجرا می‌کنه:
     - WAITING → IdentifyAndValidateRange()
     - IDENTIFIED → PlacePendingOrders()
     - ORDERS_PLACED یا TRADE_ACTIVE → ManageActiveTrade()
     - EXPIRED یا هر حالت → Cleanup() (اگر زمان انقضا رسیده باشه)

2. **IdentifyAndValidateRange()**:
   - **ورودی**: هیچی (از متغیرهای داخلی استفاده می‌کنه).
   - **منطق**:
     - بررسی `TimeCurrent() > Range_End_Time` و `m_currentState == WAITING`.
     - با `iHighest` و `iLowest` در `Range_Execution_Timeframe`، سقف (`m_rangeHigh`) و کف (`m_rangeLow`) رو محاسبه می‌کنه.
     - ارتفاع رنج (`m_rangeHigh - m_rangeLow`) رو با `MinRangePoints` و `MaxRangePoints` مقایسه می‌کنه.
     - اگه رنج بی‌کیفیت باشه، `m_currentState = EXPIRED` و خارج می‌شه.
     - اگه معتبر باشه:
       - مستطیل گرافیکی با `Range_Color` و نام منحصربه‌فرد رسم می‌کنه.
       - `m_currentState = IDENTIFIED`.
   - **لاگ**: ثبت نتیجه اعتبارسنجی در لاگ.

3. **PlacePendingOrders()**:
   - **شرط اجرا**: `m_currentState == IDENTIFIED`.
   - **منطق**:
     - محاسبه فاصله سفارش‌ها:
       - اگر `Placement_Mode == ATR`: فاصله = `ATR_Period` * `ATR_Multiplier`.
       - اگر `Placement_Mode == Percent`: فاصله = درصد از ارتفاع رنج.
     - محاسبه قیمت‌ها:
       - `buyStopPrice = m_rangeHigh + فاصله`
       - `sellStopPrice = m_rangeLow - فاصله`
       - استاپ لاس با `SL_Mode` (ATR یا Percent) محاسبه می‌شه.
     - محاسبه `m_cleanupTime = Range_End_Time + CleanupHours * 3600`.
     - ثبت دو سفارش پندینگ با `m_magicNumber` و انقضا در `m_cleanupTime`.
     - نرمال‌سازی قیمت‌ها با `NormalizeDouble` و حجم با `CalculateLotSize()`.
     - تغییر `m_currentState = ORDERS_PLACED`.
   - **لاگ**: ثبت نتیجه ثبت سفارش‌ها.

4. **ManageActiveTrade()**:
   - **شرط اجرا**: `m_currentState == ORDERS_PLACED` یا `TRADE_ACTIVE`.
   - **منطق**:
     - پیدا کردن پوزیشن باز با `m_magicNumber`.
     - **خروج پله‌ای**:
       - بررسی سود فعلی با `RR_Ratio` (مثل ۱.۵ برابر فاصله استاپ لاس).
       - محاسبه حجم بسته شدن (`PartialClosePercent`) و نرمالایز با `SYMBOL_VOLUME_STEP`.
       - اگر حجم باقی‌مانده کمتر از `SYMBOL_VOLUME_MIN` بشه، کل پوزیشن بسته می‌شه.
       - انتقال استاپ لاس به نقطه ورود (ریسک‌فری).
       - فعال‌سازی فلگ تریلینگ استاپ.
     - **تریلینگ استاپ**:
       - اگر فلگ فعال باشه، `TrailingStop()` از TradeManager.mqh با تیکت پوزیشن، `Trailing_Mode`، و `Trailing_ATR_Multiplier` فراخوانی می‌شه.
       - ATR از `Range_Execution_Timeframe` محاسبه می‌شه.
     - تغییر `m_currentState = TRADE_ACTIVE` (اگر پوزیشن باز باشه).
   - **لاگ**: ثبت تمام اقدامات (بستن، ریسک‌فری، تریلینگ).

5. **Cleanup()**:
   - **شرط اجرا**: `TimeCurrent() > m_cleanupTime` یا نزدیک شدن به تعطیلات.
   - **منطق**:
     - بستن تمام پوزیشن‌های باز با `m_magicNumber`.
     - حذف تمام سفارش‌های پندینگ با `m_magicNumber`.
     - حذف مستطیل گرافیکی (`m_rangeObjectName`).
     - ریست `m_currentState = WAITING` برای روز بعد.
   - **لاگ**: ثبت نتیجه پاکسازی.

##### ۳. منطق اجرایی اصلی (Elemento.mq5)
- **OnInit()**:
  - ایجاد آرایه `CRange g_ranges[4]`.
  - مقداردهی هر رنج با تنظیمات از `Settings.mqh` و تخصیص `m_magicNumber` (BaseMagicNumber + i).
  - ایجاد آرایه برای ذخیره زمان آخرین کندل هر تایم‌فریم.
  - ایجاد هندل‌های ATR برای هر رنج (یک‌بار برای هر ترکیب تایم‌فریم/سیمبل).
  - بررسی صحت تنظیمات (مثل اطمینان از غیرتکراری بودن مجیک نامبرها).
  - **لاگ**: ثبت موفقیت یا خطای مقداردهی.

- **OnTick()**:
  - حلقه روی `g_ranges` برای هر رنج.
  - بررسی کندل جدید با مقایسه `TimeCurrent()` و زمان آخرین کندل ذخیره‌شده برای `Range_Execution_Timeframe`.
  - اگر کندل جدید باشه:
    - فراخوانی `g_ranges[i].UpdateOnNewBar()`.
    - آپدیت زمان آخرین کندل.
  - **لاگ**: ثبت تشخیص کندل جدید.

- **OnTradeTransaction()**:
  - تشخیص رویداد `DEAL_ENTRY_IN` و خواندن مجیک نامبر معامله جدید.
  - پیدا کردن رنج مربوطه (`g_ranges[i]`) با `m_magicNumber`.
  - حذف سفارش پندینگ مخالف (OCO).
  - **لاگ**: ثبت حذف سفارش مخالف.

- **OnDeinit()**:
  - آزادسازی هندل‌های اندیکاتورها (`IndicatorRelease`).
  - پاکسازی تمام اشیاء گرافیکی.
  - **لاگ**: ثبت موفقیت دفع مقداردهی.

##### ۴. نکات کلیدی و هشدارهای پیاده‌سازی
- **مدیریت مجیک نامبر**:
  - هر رنج یه `m_magicNumber` منحصربه‌فرد داره (BaseMagicNumber + i).
  - برای مدیریت معاملات (مثل تریلینگ یا بستن)، از تیکت استفاده می‌شه.
- **نرمال‌سازی**:
  - قیمت‌ها با `NormalizeDouble` (با توجه به `SYMBOL_TRADE_TICK_SIZE`).
  - حجم‌ها با `SYMBOL_VOLUME_STEP` و `SYMBOL_VOLUME_MIN`.
- **مدیریت زمان**:
  - برای رنج‌های شبانه (مثل ۲۳:۰۰ تا ۶:۰۰)، از `datetime` و `TimeTradeServer()` برای تشخیص روز بعد استفاده می‌شه.
  - بررسی تعطیلات با `SYMBOL_TRADE_MODE` یا سرور تایم.
- **بررسی خطا**:
  - تمام درخواست‌های معاملاتی (`OrderSend`, `PositionClose`, etc.) با بررسی `trade.ResultRetcode()` و ثبت خطاها در لاگ.
- **پاکسازی تعطیلات**:
  - قبل از تعطیلات (جمعه عصر یا تعطیلات بازار)، تمام پوزیشن‌ها و سفارش‌ها بسته می‌شن.
- **گرافیک**:
  - مستطیل هر رنج با `Range_Color` رسم و در `Cleanup()` حذف می‌شه.
  - نام اشیاء گرافیکی منحصربه‌فرد (مثل "Range_X_" + TimeToString(TimeCurrent())).
- **ورودی‌های enum**:
  - ساعت‌ها، دقیقه‌ها، و `Cleanup_Hours` به‌صورت enum (0-23 یا 0-59) برای کاربرپسندی.
- **پشتیبانی چند جفت ارز**:
  - طراحی با آرایه‌های پویا (`CArrayObj`) برای اضافه کردن جفت ارزها در آینده.
- **لاگ‌گذاری**:
  - استفاده از `Print()` و `Comment()` برای ثبت تمام رویدادهای حساس (اعتبارسنجی، ثبت سفارش، خطاها).

##### ۵. پیشنهادات بهینه‌سازی
- **کش کردن داده‌ها**: ذخیره مقادیر `SymbolInfoDouble` (مثل `SYMBOL_TRADE_TICK_VALUE`) در `OnInit()` برای کاهش فراخوانی‌ها.
- **مدیریت منابع**: ایجاد یک‌بار هندل اندیکاتورها در `OnInit()` و آزادسازی در `OnDeinit()`.
- **دیباگ آسان**: افزودن لاگ فایل جداگانه برای ثبت تمام رویدادها.
- **انعطاف‌پذیری**: استفاده از `CArrayObj` برای مدیریت پویای رنج‌ها و جفت ارزها.
- **بررسی تایم‌فریم‌ها**: اطمینان از عدم تداخل تایم‌فریم‌ها با استفاده از آرایه زمان آخرین کندل.

##### ۶. الگوریتم‌های کلیدی
- **محاسبه حجم معامله (CalculateLotSize)**:
  ```
  LotSize = (RiskPercent * AccountBalance) / (SL_Distance * TickValue)
  ```
  - `RiskPercent`: از ورودی‌ها (مثل ۱٪).
  - `AccountBalance`: از `AccountBalance()`.
  - `SL_Distance`: فاصله استاپ لاس به پوینت (نرمالایز شده).
  - `TickValue`: از `SymbolInfoDouble(SYMBOL_TRADE_TICK_VALUE)`.
  - نرمال‌سازی با `SYMBOL_VOLUME_STEP` و `SYMBOL_VOLUME_MIN`.

- **تریلینگ استاپ**:
  - اگر `Trailing_Mode == ATR`:
    - محاسبه فاصله = `Trailing_ATR_Multiplier` * ATR(`Trailing_ATR_Period`, `Range_Execution_Timeframe`).
    - آپدیت استاپ لاس با تیکت پوزیشن.
  - اگر `Trailing_Mode == Simple`:
    - فاصله ثابت (از ورودی‌ها) پشت قیمت حرکت می‌کنه.

- **زمان‌بندی رنج‌های شبانه**:
  - تبدیل `Range_Start_Hour/Minute` و `Range_End_Hour/Minute` به `datetime` با `TimeHelper.mqh`.
  - اگر `Range_End_Hour` کمتر از `Range_Start_Hour` باشه، روز بعد در نظر گرفته می‌شه.

---
